import os
import nimblephysics as nimble
import shutil
from typing import List, Optional, Dict, Any
import json
import textwrap


def get_overall_results_json(self) -> Dict[str, Any]:
    overall_results: Dict[str, Any] = {}
    for trial in self.trials:
        trial_results: Dict[str, Any] = {}
        segment_results: List[Dict[str, Any]] = [segment.get_segment_results_json() for segment in trial.segments]
        trial_results['segments'] = segment_results
        overall_results[trial.trial_name] = trial_results
    return overall_results


def generate_readme(self) -> str:
    # 11. Generate the README file.
    # -----------------------------
    print('Generating README file...')

    text = ''
    text += "*** This data was generated with AddBiomechanics (www.addbiomechanics.org) ***\n"
    text += "AddBiomechanics was written by Keenon Werling.\n"
    text += "\n"
    text += textwrap.fill(
        "Please visit our forums on SimTK for help using the tool: "
        "https://simtk.org/plugins/phpBB/indexPhpbb.php?group_id=2402&pluginname=phpBB")

    # TODO: Add the rest of the autogenerated README file

    return text


def write_web_results(self, results_path: str):
    if not results_path.endswith('/'):
        results_path += '/'
    if not os.path.exists(results_path):
        os.mkdir(results_path)

    overall_results = self.get_overall_results_json()
    with open(results_path + '_results.json', 'w') as f:
        json.dump(overall_results, f, indent=4)
        print('Wrote JSON results to ' + results_path + '_results.json', flush=True)

    trials_folder_path = results_path + 'trials/'
    if not os.path.exists(trials_folder_path):
        os.mkdir(trials_folder_path)

    for trial in self.trials:
        trial_path = results_path + 'trials/' + trial.trial_name + '/'
        if not os.path.exists(trial_path):
            os.mkdir(trial_path)

        for i in range(len(trial.segments)):
            segment = trial.segments[i]
            segment_path = trial_path + 'segment_' + str(i + 1) + '/'
            if not os.path.exists(segment_path):
                os.mkdir(segment_path)
            # Write out the result summary JSON
            print('Writing JSON result to ' + segment_path + '_results.json', flush=True)
            segment_json = segment.get_segment_results_json()
            with open(segment_path + '_results.json', 'w') as f:
                json.dump(segment_json, f, indent=4)
            # Write out the animation preview binary
            segment.save_segment_to_gui(segment_path + 'preview.bin',
                                        self.skeleton,
                                        self.fitMarkers,
                                        self.goldOsim)
            # Write out the data CSV for the plotting software to synchronize on the frontend
            segment.save_segment_csv(segment_path + 'data.csv', self.skeleton)
